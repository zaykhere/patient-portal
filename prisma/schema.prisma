generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appointment_doctors {
  id             Int       @id @default(autoincrement())
  appointment_id Int
  doctor_id      Int
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  users          users     @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_doctors_ibfk_1")

  @@index([doctor_id], map: "doctor_id")
}

model appointment_patients {
  id             Int       @id @default(autoincrement())
  appointment_id Int
  patient_id     Int
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  users          users     @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_patients_ibfk_1")

  @@index([patient_id], map: "patient_id")
}

model appointments {
  id            Int               @id @default(autoincrement())
  type          appointments_type
  created_at    DateTime?         @default(now()) @db.Timestamp(0)
  date          DateTime?         @db.Date
  start_time    DateTime?         @db.Time(0)
  end_time      DateTime?         @db.Time(0)
  cancelled     Int?              @default(0) @db.TinyInt
  prescriptions prescriptions[]
}

model lab_tests {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  instructions           String                   @db.VarChar(255)
  created_at             DateTime?                @default(now()) @db.Timestamp(0)
  prescription_lab_tests prescription_lab_tests[]
}

model medical_records {
  id                     Int                      @id @default(autoincrement())
  patient_id             Int
  date_created           DateTime                 @db.DateTime(0)
  content                String                   @db.VarChar(255)
  created_at             DateTime?                @default(now()) @db.Timestamp(0)
  file_name              String?                  @db.VarChar(255)
  file_url               String                   @db.VarChar(255)
  users                  users                    @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "medical_records_ibfk_1")
  shared_medical_records shared_medical_records[]

  @@index([patient_id], map: "patient_id")
}

model medicines {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  dosage                 String                   @db.VarChar(255)
  created_at             DateTime?                @default(now()) @db.Timestamp(0)
  prescription_medicines prescription_medicines[]
}

model prescription_lab_tests {
  prescription_id Int
  lab_test_id     Int
  created_at      DateTime?     @default(now()) @db.Timestamp(0)
  prescriptions   prescriptions @relation(fields: [prescription_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescription_lab_tests_ibfk_1")
  lab_tests       lab_tests     @relation(fields: [lab_test_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescription_lab_tests_ibfk_2")

  @@id([prescription_id, lab_test_id])
  @@index([lab_test_id], map: "lab_test_id")
}

model prescription_medicines {
  prescription_id Int
  medicine_id     Int
  created_at      DateTime?     @default(now()) @db.Timestamp(0)
  prescriptions   prescriptions @relation(fields: [prescription_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescription_medicines_ibfk_1")
  medicines       medicines     @relation(fields: [medicine_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescription_medicines_ibfk_2")

  @@id([prescription_id, medicine_id])
  @@index([medicine_id], map: "medicine_id")
}

model prescriptions {
  id                                       Int                      @id @default(autoincrement())
  appointment_id                           Int
  prescribed_by                            Int
  prescribed_to                            Int
  created_at                               DateTime?                @default(now()) @db.Timestamp(0)
  prescription_lab_tests                   prescription_lab_tests[]
  prescription_medicines                   prescription_medicines[]
  appointments                             appointments             @relation(fields: [appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescriptions_ibfk_1")
  users_prescriptions_prescribed_byTousers users                    @relation("prescriptions_prescribed_byTousers", fields: [prescribed_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescriptions_ibfk_2")
  users_prescriptions_prescribed_toTousers users                    @relation("prescriptions_prescribed_toTousers", fields: [prescribed_to], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prescriptions_ibfk_3")

  @@index([appointment_id], map: "appointment_id")
  @@index([prescribed_by], map: "prescribed_by")
  @@index([prescribed_to], map: "prescribed_to")
}

model roles {
  id          Int           @id @default(autoincrement())
  role_name   String        @db.VarChar(40)
  users       users[]
  users_roles users_roles[]
}

model shared_medical_records {
  id                Int             @id @default(autoincrement())
  medical_record_id Int
  doctor_id         Int
  date_shared       DateTime        @db.DateTime(0)
  created_at        DateTime?       @default(now()) @db.Timestamp(0)
  medical_records   medical_records @relation(fields: [medical_record_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shared_medical_records_ibfk_1")
  users             users           @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shared_medical_records_ibfk_2")

  @@index([doctor_id], map: "doctor_id")
  @@index([medical_record_id], map: "medical_record_id")
}

model users {
  id                                               Int                      @id @default(autoincrement())
  name                                             String                   @db.VarChar(255)
  role_id                                          Int
  email                                            String                   @db.VarChar(255)
  password                                         String                   @db.VarChar(255)
  age                                              Int?
  date_of_birth                                    DateTime?                @db.Date
  height                                           Int?
  weight                                           Decimal?                 @db.Decimal(3, 2)
  about                                            String?                  @db.Text
  address                                          String?                  @db.Text
  gender                                           users_gender?
  is_verified                                      Int?                     @default(0) @db.TinyInt
  otp                                              Int?
  otp_sent_at                                      DateTime?                @db.Timestamp(0)
  forgot_password_otp                              Int?
  forgot_otp_sent_at                               DateTime?                @db.Timestamp(0)
  is_forgot_otp_verified                           Int?                     @default(0) @db.TinyInt
  created_at                                       DateTime?                @default(now()) @db.Timestamp(0)
  appointment_doctors                              appointment_doctors[]
  appointment_patients                             appointment_patients[]
  doctor_reviews_doctor_reviews_doctor_idTousers   doctor_reviews[]         @relation("doctor_reviews_doctor_idTousers")
  doctor_reviews_doctor_reviews_patient_idTousers  doctor_reviews[]         @relation("doctor_reviews_patient_idTousers")
  medical_records                                  medical_records[]
  patient_health_records                           patient_health_records[]
  patient_info                                     patient_info[]
  phone_numbers                                    phone_numbers[]
  prescriptions_prescriptions_prescribed_byTousers prescriptions[]          @relation("prescriptions_prescribed_byTousers")
  prescriptions_prescriptions_prescribed_toTousers prescriptions[]          @relation("prescriptions_prescribed_toTousers")
  shared_medical_records                           shared_medical_records[]
  time_slots                                       time_slots[]
  roles                                            roles                    @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")
  users_roles                                      users_roles[]

  @@index([role_id], map: "role_id")
}

model users_roles {
  user_role_id Int    @id @default(autoincrement())
  user_id      Int?
  role_id      Int?
  users        users? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_roles_ibfk_1")
  roles        roles? @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_roles_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model doctor_reviews {
  id                                     Int       @id @default(autoincrement())
  doctor_id                              Int?
  patient_id                             Int?
  review_text                            String?   @db.Text
  rating                                 Decimal?  @db.Decimal(3, 2)
  review_date                            DateTime? @db.Date
  created_at                             DateTime? @default(now()) @db.Timestamp(0)
  users_doctor_reviews_doctor_idTousers  users?    @relation("doctor_reviews_doctor_idTousers", fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "doctor_reviews_ibfk_1")
  users_doctor_reviews_patient_idTousers users?    @relation("doctor_reviews_patient_idTousers", fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "doctor_reviews_ibfk_2")

  @@index([doctor_id], map: "doctor_id")
  @@index([patient_id], map: "patient_id")
}

model time_slots {
  id           Int       @id @default(autoincrement())
  doctor_id    Int
  start_time   DateTime? @db.DateTime(0)
  end_time     DateTime? @db.DateTime(0)
  day          String?   @db.VarChar(10)
  is_available Int?      @default(1) @db.TinyInt
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  users        users     @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "time_slots_ibfk_1")

  @@index([doctor_id], map: "doctor_id")
}

model phone_numbers {
  id           Int    @id @default(autoincrement())
  country_code String @db.VarChar(5)
  phone        String @db.VarChar(15)
  user_id      Int
  users        users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phone_numbers_ibfk_1")

  @@index([user_id], map: "user_id")
}

model patient_health_records {
  id                       Int       @id @default(autoincrement())
  user_id                  Int
  blood_pressure_systolic  Int?
  blood_pressure_diastolic Int?
  pulse_rate               Int?
  temperature              Int?
  weight                   Decimal?  @db.Decimal(5, 2)
  height                   Int?
  anxiety_rate             Int?
  depression_rate          Int?
  waist                    Int?
  head                     Int?
  sugar_fasting            Int?
  sugar_random             Int?
  created_at               DateTime? @default(now()) @db.Timestamp(0)
  users                    users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_health_records_ibfk_1")

  @@index([user_id], map: "user_id")
}

model patient_info {
  id          Int     @id @default(autoincrement())
  user_id     Int
  blood_group String? @db.VarChar(20)
  height      String? @db.VarChar(10)
  weight      String? @db.VarChar(10)
  users       users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_info_ibfk_1")

  @@index([user_id], map: "user_id")
}

enum appointments_type {
  one_on_one @map("one-on-one")
  group
}

enum users_gender {
  Male
  Female
  Other
}
